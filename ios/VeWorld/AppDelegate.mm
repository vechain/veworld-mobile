#import "AppDelegate.h"
#import "RNBootSplash.h"
#import <React/RCTBundleURLProvider.h>
#import <React/RCTLinkingManager.h>

// MARK: REMOVE ANY POSSIBLE KESYS LEFT IN KEYCHAIN FROM PREVIOUS INSTALLATIONS ON NEW APP INSTALL
static void ClearKeychainIfNecessary() {
    // Checks wether or not this is the first time the app is run
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"HAS_RUN_BEFORE"] == NO) {
        // Set the appropriate value so we don't clear next time the app is launched
        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"HAS_RUN_BEFORE"];

        NSArray *secItemClasses = @[
            (__bridge id)kSecClassGenericPassword,
            (__bridge id)kSecClassInternetPassword,
            (__bridge id)kSecClassCertificate,
            (__bridge id)kSecClassKey,
            (__bridge id)kSecClassIdentity
        ];

        // Maps through all Keychain classes generated by the app and deletes all items that match
        for (id secItemClass in secItemClasses) {
            NSDictionary *spec = @{(__bridge id)kSecClass: secItemClass};
            SecItemDelete((__bridge CFDictionaryRef)spec);
        }
    }
}

/*
// MARK: REMOVE ANY POSSIBLE KESYS LEFT IN KEYCHAIN FROM PREVIOUS INSTALLATIONS ON NEW APP INSTALL EXCLUDING KEYS WITH "CLOUD_WALLET_"
static void ClearKeychainIfNecessary() {
    // Checks whether or not this is the first time the app is run
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"HAS_RUN_BEFORE"] == NO) {
        // Set the appropriate value so we don't clear next time the app is launched
        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"HAS_RUN_BEFORE"];

        NSArray *secItemClasses = @[
            (__bridge id)kSecClassGenericPassword,
            (__bridge id)kSecClassInternetPassword,
            (__bridge id)kSecClassCertificate,
            (__bridge id)kSecClassKey,
            (__bridge id)kSecClassIdentity
        ];

        // Maps through all Keychain classes generated by the app and deletes all items that match
        for (id secItemClass in secItemClasses) {
            NSDictionary *query = @{(__bridge id)kSecClass: secItemClass,
                                    (__bridge id)kSecReturnAttributes: @YES,
                                    (__bridge id)kSecMatchLimit: (__bridge id)kSecMatchLimitAll};
            
            CFArrayRef result = NULL;
            OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)query, (CFTypeRef *)&result);
            if (status == errSecSuccess) {
                NSArray *items = (__bridge_transfer NSArray *)result;
                for (NSDictionary *item in items) {
                    id itemName = item[(__bridge id)kSecAttrAccount];
                    if ([itemName isKindOfClass:[NSString class]] && ![(NSString *)itemName hasPrefix:@"CLOUD_WALLET_"]) {
                        @autoreleasepool {
                          NSLog(@"- - - - - KEY DELETED FROM KEYCHAIN - - - - - - : %@", itemName);
                        }
                      
                        NSDictionary *deleteQuery = @{(__bridge id)kSecClass: secItemClass,
                                                      (__bridge id)kSecAttrAccount: itemName};
                        SecItemDelete((__bridge CFDictionaryRef)deleteQuery);
                    }
                }
            }
        }
    }
}
*/

@implementation AppDelegate

// Handle the app entering the background state
- (void)applicationDidEnterBackground:(UIApplication *)application {
  UIView *secureView = [[UIView alloc] initWithFrame:self.window.bounds]; 
  secureView.tag = 9824684;
  secureView.backgroundColor = [UIColor colorWithRed:(0.11372549019607843) green:(0.09019607843137255) blue:(0.22745098039215686) alpha:(1)];

  CGFloat imageViewWidth = 100;
  CGFloat imageViewHeight = 91;
  CGFloat xPosition = (secureView.frame.size.width - imageViewWidth) / 2;
  CGFloat yPosition = (secureView.frame.size.height - imageViewHeight) / 2;
      
  UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(xPosition, yPosition, imageViewWidth, imageViewHeight)];
  imageView.contentMode = UIViewContentModeScaleAspectFit;

  imageView.image = [UIImage imageNamed:@"BootSplashLogo"];
  imageView.contentMode = UIViewContentModeScaleAspectFit;
  
  [secureView addSubview:imageView];
  [self.window addSubview:secureView];
}

// Handle the app entering in the foreground state
- (void)applicationWillEnterForeground:(UIApplication *)application {
  // Remove the blank view when the app returns to the foreground
  UIView *secureView = [self.window viewWithTag:9824684];
  [secureView removeFromSuperview];
}

- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity
 restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler
{
 return [RCTLinkingManager application:application
                  continueUserActivity:userActivity
                    restorationHandler:restorationHandler];
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options
{
return [RCTLinkingManager application:application openURL:url options:options];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  self.moduleName = @"VeWorld";
  // You can add your custom initial props in the dictionary below.
  // They will be passed down to the ViewController used by React Native.
  self.initialProps = @{};

  return [super application:application didFinishLaunchingWithOptions:launchOptions];
}

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
  return [self bundleURL];
}

- (NSURL *)bundleURL
{
#if DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@".expo/.virtual-metro-entry"];
#else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}

- (void)customizeRootView:(RCTRootView *)rootView {
  [super customizeRootView:rootView];
  [RNBootSplash initWithStoryboard:@"BootSplash" rootView:rootView]; // ⬅️ initialize the splash screen
}

@end
