# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require "dotenv"

before_all do
	Dotenv.load ".env"
end


default_platform(:ios)

platform :ios do

  desc "Run e2e tests"
  lane :e2e do
    Dir.chdir "../.." do # Navigate to the root of the project where the Detox files are placed.
      sh("detox build --configuration ios.sim.debug")
      sh("detox test --configuration ios.sim.debug --loglevel trace --record-logs all")
    end
  end




  desc "Create changelog"
  lane :create_changelog do |values|

    Dir.chdir "../.." do # Navigate to the root
      sh("yarn release")
    end

    version = values[:version]

    package_json = JSON.parse(File.read("../../package.json"))
    package_json["version"] = version
    File.write("../../package.json", JSON.pretty_generate(package_json))
  end




  desc "Create Release Branch on GitHub for Beta"
  lane :gh_setup_before do |values|

    github_token = values[:github_token]
    github_username = values[:github_username]
    build_or_version_number = values[:build_or_version_number]
    branch_name = "release-build"

    # Create and push the branch locally
    sh("git checkout -b #{branch_name}-#{build_or_version_number}")

    # Set the GitHub remote URL with credentials
    remote_url = "https://#{github_username}:#{github_token}@github.com/vechainfoundation/veworld-mobile.git"
    sh("git remote set-url origin #{remote_url}")
    sh("git commit -a -m 'build: init'")

    # Push the branch to GitHub
    sh("git push -u origin #{branch_name}-#{build_or_version_number}")
  end



   

  desc "Commit latest artifacts to GitHub"
  lane :gh_setup_after do |values|
    branch_name = "release-build"

    github_token = values[:github_token]
    github_username = values[:github_username]
    build_or_version_number = values[:build_or_version_number]

    sh("git add --all")
    sh("git commit -a -m 'build: complete'")
    # Push the branch to GitHub
    sh("git push -u origin #{branch_name}-#{build_or_version_number}")
  end






  # Builds the app using specified options.
  #
  # @param {string} options[:username] - The GitHub username for authentication.
  # @param {string} options[:token] - The GitHub personal token for authentication.
  # @param optional {string} options[:version] - The version type for the build (e.g., "patch", "minor", "major", "2.1.1").
  #
  desc "Push a new beta build to TestFlight"
  lane :build do |options|
    github_username = options[:username]
    github_token = options[:token]
    versionType = options[:version]

    ensure_git_status_clean
    ensure_git_branch(branch: "main")

    build = increment_build_number(xcodeproj: "VeWorld.xcodeproj")

    if !versionType.nil? 
      version = increment_version_number_in_xcodeproj(bump_type: versionType.downcase)
    end

    gh_setup_before(
      github_username:github_username, 
      github_token:github_token,
      build_or_version_number: versionType.nil? ? build : version
    )

    Dir.chdir "../.." do
      sh("yarn purge && yarn install:all")
    end

    get_certificates( # Create or get certificate, and install it
      output_path: "./builds" # Download certificate in the build folder (you don't need to create the folder)
    )

    get_provisioning_profile( # Create or get provisioning profile
      output_path: "./builds",  # Download provisioning profile in the build folder
      filename: "provisioning.mobileprovision" # Rename the local provisioning profile
    )

    update_project_provisioning( # Set the project provisioning profile (related in Xcode to the General > Signing Release section)
      xcodeproj: "VeWorld.xcodeproj",
      target_filter: "VeWorld", # Name of your project
      profile: "./builds/provisioning.mobileprovision",
      build_configuration: "Release"
    )

    update_project_team( # Set the right team on your project
      teamid: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )

    build_app(workspace: "VeWorld.xcworkspace", scheme: "VeWorld", 
      clean: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) => CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + " AppStore" # Value of this parameter is the name of the Provisioning Profile. By default, it will be "{bundleId} AppStore"
        }
      },
      build_path: "./builds",
      output_directory: "./builds"
    )
      
    upload_to_testflight(
      skip_waiting_for_build_processing: true, 
      apple_id: "6446854569"
    )

    if !versionType.nil?
      create_changelog(version:version)

      add_git_tag(
        tag: "v#{version}"
      )

      push_git_tags
    end

    gh_setup_after(
      github_username:github_username, 
      github_token:github_token,
      build_or_version_number: versionType.nil? ? build : version
    )

    create_pull_request(
      api_token: github_token,
      repo: "vechainfoundation/veworld-mobile",
      title: versionType.nil? ? "build: build artifacts build-#{build}" : "version: build artifacts version-#{version}", 
      base: "main",
      api_url: "https://api.github.com"
    )

    slack(
      message: versionType.nil? ? "VeWorld build number: #{build} was successfully released!" : "VeWorld version number: #{version} was successfully released!",
      slack_url: ENV["SLACK_WEBHOOK"],
      success: true,
      payload: {
        "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
        "Built by" => github_username,
      },
    )
  end
end
