# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require "dotenv"

before_all do
	Dotenv.load ".env"
end


default_platform(:ios)

platform :ios do


  desc "Generate new certificates"
  lane :generate_new_certificates do
    sync_code_signing(
      type: "appstore",
      app_identifier: ENV["APP_IDENTIFIER"],
      force_for_new_devices: true,
      readonly: false,
      git_branch: "main",
      skip_docs: true,
      verbose: true
    )
  end



  # To be called (by everyone) whernever a new dev is onboarded to the project
  desc "Get certificates"
  lane :fetch_certificates_from_gh do
    sync_code_signing(
      type: "appstore",
      app_identifier: ENV["APP_IDENTIFIER"],
      readonly: true,
      git_branch: "main",
      verbose: true
    )
  end




  desc "Run e2e tests"
  lane :e2e do
    Dir.chdir "../.." do # Navigate to the root of the project where the Detox files are placed.
      sh("detox build --configuration ios.sim.debug")
      sh("detox test --configuration ios.sim.debug --loglevel trace --record-logs all")
    end
  end




  desc "Create changelog"
  lane :create_changelog do |values|

    Dir.chdir "../.." do # Navigate to the root
      sh("yarn release:ci")
    end

    version = values[:version]

    package_json = JSON.parse(File.read("../../package.json"))
    package_json["version"] = version
    File.write("../../package.json", JSON.pretty_generate(package_json))
  end




  desc "Create Release Branch on GitHub for Beta"
  lane :gh_setup_before do |values|

    github_token = values[:github_token]
    github_username = values[:github_username]
    build_or_version_number = values[:build_or_version_number]
    branch_name = "release-build"

    # Create and push the branch locally
    sh("git checkout -b #{branch_name}-#{build_or_version_number}")

    # Set the GitHub remote URL with credentials
    remote_url = "https://#{github_username}:#{github_token}@github.com/vechainfoundation/veworld-mobile.git"
    sh("git remote set-url origin #{remote_url}")
    sh("git commit -a -m 'build: init'")

    # Push the branch to GitHub
    sh("git push -u origin #{branch_name}-#{build_or_version_number}")
  end



   

  desc "Commit latest artifacts to GitHub"
  lane :gh_setup_after do |values|
    branch_name = "release-build"
    build_or_version_number = values[:build_or_version_number]

    sh("git add --all")
    sh("git commit -a -m 'build: complete'")
    # Push the branch to GitHub
    sh("git push -u origin #{branch_name}-#{build_or_version_number}")
  end




  # Builds the app using specified options.
  #
  # @param {string} options[:username] - The GitHub username for authentication.
  # @param {string} options[:token] - The GitHub personal token for authentication.
  # @param optional {string} options[:version] - The version type for the build (e.g., "patch", "minor", "major").
  #
  desc "Push a new beta build to TestFlight"
  lane :build do |options|
    github_username = options[:username]
    github_token = options[:token]
    versionType = options[:version]
    buildNumber = options[:build]

    #prepare git
    ensure_git_status_clean
    ensure_git_branch(branch: "main")

    # check if spceicifed build number
    if !buildNumber.nil? 
      build = increment_build_number_in_plist(build_number: buildNumber, xcodeproj: "VeWorld.xcodeproj")
              increment_build_number_in_xcodeproj(build_number: buildNumber, xcodeproj: "VeWorld.xcodeproj")
    else
      build = increment_build_number_in_plist(xcodeproj: "VeWorld.xcodeproj")
              increment_build_number_in_xcodeproj(xcodeproj: "VeWorld.xcodeproj")
    end

    # check if spceicifed version number
    if !versionType.nil? 
      if versionType.downcase != "patch" && versionType.downcase != "minor" && versionType.downcase != "major"
        version = increment_version_number_in_plist(version_number: versionType.downcase, xcodeproj: "VeWorld.xcodeproj")
                  increment_version_number_in_xcodeproj(version_number: versionType.downcase, xcodeproj: "VeWorld.xcodeproj")
      else 
        version = increment_version_number_in_plist(bump_type: versionType.downcase, xcodeproj: "VeWorld.xcodeproj")
                  increment_version_number_in_xcodeproj(version_number: versionType.downcase, xcodeproj: "VeWorld.xcodeproj")
      end
    end

    # update yarn packages and pods
    Dir.chdir "../.." do
      sh("yarn purge && yarn install:all")
    end

    # create new branch and push to github
    gh_setup_before(
      github_username:github_username, 
      github_token:github_token,
      build_or_version_number: versionType.nil? ? build : version
    )

    # fetch certificates from github
    fetch_certificates_from_gh

    # build app
    build_app(
      workspace: "VeWorld.xcworkspace", 
      scheme: "VeWorld", 
      export_method: "app-store",
      clean: true,
      build_path: "./build",
      output_directory: "./build",
    )
      
    # upload to testflight
    upload_to_testflight(
      skip_waiting_for_build_processing: true, 
      apple_id: "6446854569",
      ipa: "./build/VeWorld.ipa",
    )

    # create changelog and tag if version is specified
    if !versionType.nil?
      create_changelog(version:version)

      add_git_tag(
        tag: "v#{version}"
      )

      push_git_tags

      # push to github latest artifacts
      gh_setup_after(
        github_username:github_username, 
        github_token:github_token,
        build_or_version_number:version
      )
    end

    # create pull request
    create_pull_request(
      api_token: github_token,
      repo: "vechainfoundation/veworld-mobile",
      title: versionType.nil? ? "build: build artifacts build-#{build}" : "version: build artifacts version-#{version}", 
      base: "main",
      api_url: "https://api.github.com"
    )

    # send slack message
    slack(
      message: versionType.nil? ? "VeWorld build number: #{build} was successfully released!" : "VeWorld version number: #{version} was successfully released!",
      slack_url: ENV["SLACK_WEBHOOK"],
      success: true,
      payload: {
        "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
        "Built by" => github_username,
      },
    )

    # clean build artifacts if any
    clean_build_artifacts

  end
end
