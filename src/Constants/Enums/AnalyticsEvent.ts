/**
 * Try to keep these names consistent. Trying to stick to the rough convention of: <DOMAIN>_<ACTION>_<RESULT>
 */
export enum AnalyticsEvent {
    /**
     * Security
     */
    APP_PIN_UNLOCKED = "APP_PIN_UNLOCKED",
    APP_WRONG_PIN = "APP_WRONG_PIN",
    APP_BIOMETRICS_UNLOCKED = "APP_BIOMETRICS_UNLOCKED",

    /**
     * DApps
     */
    DAPP_TX_REQUESTED = "DAPP_TX_REQUESTED",
    DAPP_REQUEST_CERTIFICATE = "DAPP_REQUEST_CERTIFICATE",
    DAPP_CERTIFICATE_SUCCESS = "DAPP_CERTIFICATE_SUCCESS",
    DAPP_CERTIFICATE_FAILED = "DAPP_CERTIFICATE_FAILED",
    DAPP_CERTIFICATE_REJECTED = "DAPP_CERTIFICATE_REJECTED",
    DAPP_UNIVERSAL_LINK_INITIATED = "DAPP_UNIVERSAL_LINK_INITIATED",
    DAPP_UNIVERSAL_LINK_OPENED = "DAPP_UNIVERSAL_LINK_OPENED",
    DAPP_DISCOVERY_TRANSACTION_SENT_SUCCESS = "DAPP_DISCOVERY_TRANSACTION_SENT_SUCCESS",
    DAPP_DISCOVERY_TRANSACTION_SENT_FAILURE = "DAPP_DISCOVERY_TRANSACTION_SENT_FAILURE",

    /**
     * Tokens
     */
    TOKENS_CUSTOM_TOKEN_ADDED = "TOKENS_CUSTOM_TOKEN_ADDED",

    /**
     * Add wallets/accounts Events
     */
    WALLET_ADD_LEDGER_SUCCESS = "WALLET_ADD_LEDGER_SUCCESS",
    WALLET_ADD_LEDGER_ERROR = "WALLET_ADD_LEDGER_ERROR",
    WALLET_ADD_LOCAL_SUCCESS = "WALLET_ADD_LOCAL_SUCCESS",
    WALLET_ADD_LOCAL_ERROR = "WALLET_ADD_LOCAL_ERROR",
    PAGE_LOADED_IMPORT_OR_CREATE = "PAGE_LOADED_IMPORT_OR_CREATE",
    PAGE_LOADED_SETUP_PASSWORD = "PAGE_LOADED_SETUP_PASSWORD",
    PASSWORD_SETUP_SUBMITTED = "PASSWORD_SETUP_SUBMITTED",
    NEW_WALLET_VERIFICATION_ATTEMPTED = "NEW_WALLET_VERIFICATION_ATTEMPTED",
    NEW_WALLET_VERIFICATION_SUCCESS = "NEW_WALLET_VERIFICATION_SUCCESS",
    NEW_WALLET_VERIFICATION_FAILED = "NEW_WALLET_VERIFICATION_FAILED",
    NEW_WALLET_PROCEED_TO_VERIFY = "NEW_WALLET_PROCEED_TO_VERIFY",
    IMPORT_MNEMONIC_SUBMITTED = "IMPORT_MNEMONIC_SUBMITTED",
    IMPORT_PRIVATE_KEY_SUBMITTED = "IMPORT_PRIVATE_KEY_SUBMITTED",
    IMPORT_KEYSTORE_FILE_SUBMITTED = "IMPORT_KEYSTORE_FILE_SUBMITTED",
    IMPORT_MNEMONIC_FAILED = "IMPORT_MNEMONIC_FAILED",
    IMPORT_PRIVATE_KEY_FAILED = "IMPORT_PRIVATE_KEY_FAILED",
    IMPORT_KEYSTORE_FILE_FAILED = "IMPORT_KEYSTORE_FILE_FAILED",
    IMPORT_HW_PAGE_LOADED = "IMPORT_HW_PAGE_LOADED",
    IMPORT_HW_FOUND_LEDGER_DETAILS = "IMPORT_HW_FOUND_LEDGER_DETAILS",
    IMPORT_HW_SELECTED_LEDGER = "IMPORT_HW_SELECTED_LEDGER",
    IMPORT_HW_FAILED_TO_IMPORT = "IMPORT_HW_FAILED_TO_IMPORT",
    IMPORT_HW_USER_SUBMITTED_ACCOUNTS = "IMPORT_HW_USER_SUBMITTED_ACCOUNTS",
    COMPLETED_WALLET_SCREEN = "COMPLETED_WALLET_SCREEN",
    SELECT_WALLET_CREATE_WALLET = "SELECT_WALLET_CREATE_WALLET",
    SELECT_WALLET_IMPORT_WALLET = "SELECT_WALLET_IMPORT_WALLET",
    SELECT_WALLET_IMPORT_MNEMONIC = "SELECT_WALLET_IMPORT_MNEMONIC",
    SELECT_WALLET_IMPORT_HARDWARE = "SELECT_WALLET_IMPORT_HARDWARE",
    SELECT_WALLET_OBSERVE_WALLET = "SELECT_WALLET_OBSERVE_WALLET",

    DISCOVERY_SECTION_OPENED = "DISCOVERY_SECTION_OPENED",
    DISCOVERY_USER_OPENED_DAPP = "DISCOVERY_USER_OPENED_DAPP",
    DISCOVERY_CERTIFICATE_REQUESTED = "DISCOVERY_CERTIFICATE_REQUESTED",
    DISCOVERY_CERTIFICATE_SUCCESS = "DISCOVERY_CERTIFICATE_SUCCESS",
    DISCOVERY_CERTIFICATE_ERROR = "DISCOVERY_CERTIFICATE_ERROR",
    DISCOVERY_TRANSACTION_REQUESTED = "DISCOVERY_TRANSACTION_REQUESTED",
    DISCOVERY_TRANSACTION_SUCCESS = "DISCOVERY_TRANSACTION_SUCCESS",
    DISCOVERY_TRANSACTION_ERROR = "DISCOVERY_TRANSACTION_ERROR",

    DISCOVERY_BOOKMARK_ADDED = "DISCOVERY_LINK_BOOKMARKED",
    DISCOVERY_BOOKMARK_REMOVED = "DISCOVERY_LINK_BOOKMARK_REMOVED",

    /**
     * BUY
     */
    BUY_CRYPTO_BUTTON_CLICKED = "BUY_CRYPTO_BUTTON_CLICKED",
    BUY_CRYPTO_PROVIDER_SELECTED = "BUY_CRYPTO_PROVIDER_SELECTED",
    BUY_CRYPTO_SUCCESSFULLY_COMPLETED = "BUY_CRYPTO_SUCCESSFULLY_COMPLETED",

    //*
    // * VERSION UPGRADE MODAL
    // */
    VERSION_UPGRADE_MODAL_OPENED = "VERSION_UPGRADE_MODAL_OPENED",
    VERSION_UPGRADE_MODAL_SUCCESS = "VERSION_UPGRADE_MODAL_SUCCESS",

    /**
     * UNIFIED EVENTS
     */

    WALLET_OPERATION = "WALLET_OPERATION",
    NATIVE_TOKEN = "NATIVE_TOKEN",
    TOKEN = "TOKEN",
    NFT = "NFT",
    LOCAL = "LOCAL",
    HARDWARE = "HARDWARE",
    IN_APP = "IN_APP",
    WALLET_CONNECT = "WALLET_CONNECT",
    DAPP = "DAPP",
    SEND = "SEND",
}

/**
 * @description MixPanelEvent type
 */
type MixPanelEvent = {
    medium: AnalyticsEvent.SEND | AnalyticsEvent.DAPP
    signature: AnalyticsEvent.LOCAL | AnalyticsEvent.HARDWARE
    network: string
    subject?: AnalyticsEvent.NATIVE_TOKEN | AnalyticsEvent.TOKEN | AnalyticsEvent.NFT
    context?: AnalyticsEvent.IN_APP | AnalyticsEvent.WALLET_CONNECT | AnalyticsEvent.SEND
    failed?: boolean
    dappUrl?: string
}

/**
 * @param {AnalyticsEvent.SEND | AnalyticsEvent.DAPP} medium
 * @param {AnalyticsEvent.LOCAL | AnalyticsEvent.HARDWARE} signature
 * @param {string} network
 * @param {AnalyticsEvent.NATIVE_TOKEN | AnalyticsEvent.TOKEN | AnalyticsEvent.NFT} [subject]
 * @param {AnalyticsEvent.IN_APP | AnalyticsEvent.WALLET_CONNECT | AnalyticsEvent.SEND} [context]
 * @param {boolean} [failed]
 * @param {string} [dappUrl]
 *
 * @description Create a new event for mixpanel
 * @returns {MixPanelEvent} object
 */

export const creteAnalyticsEvent = ({
    medium,
    signature,
    network,
    subject,
    context,
    failed,
    dappUrl,
}: {
    medium: AnalyticsEvent.SEND | AnalyticsEvent.DAPP
    signature: AnalyticsEvent.LOCAL | AnalyticsEvent.HARDWARE
    network: string
    subject?: AnalyticsEvent.NATIVE_TOKEN | AnalyticsEvent.TOKEN | AnalyticsEvent.NFT
    context?: AnalyticsEvent.IN_APP | AnalyticsEvent.WALLET_CONNECT | AnalyticsEvent.SEND
    failed?: boolean
    dappUrl?: string
}): MixPanelEvent => {
    return {
        subject,
        medium,
        network,
        signature,
        context,
        failed,
        dappUrl,
    }
}
