name: E2E Testing - iOS

on:
  workflow_dispatch:

  workflow_call:

  push:
    branches:
      - chore/fix-report-reset-app

jobs:
  build-e2e-test-ios:
    name: Detox Build & Test iOS Debug
    runs-on: macos-latest-xl

    # Proceed only if it's either not a release event or it's a pre-release.
    if: ${{ github.event_name != 'release' || (github.event_name == 'release' && github.event.release.prerelease) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # If it's a pre-release, check out the tag corresponding to the pre-release; otherwise, use the main branch.
          ref: ${{ github.event_name == 'release' && github.event.release.prerelease && github.event.release.tag_name || 'main' }}


      # Install Homebrew and applesimutils for Detox
      - name: Install macOS dependencies
        run: |
          brew tap wix/brew
          brew install applesimutils
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1

      # Setup Ruby
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      # Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "yarn"

      # install dependencies with yarn
      - name: Install & Patch packages
        run: yarn install --frozen-lockfile --network-timeout 300000

      # Install CocoaPods
      - name: Install CocoaPods
        if: steps.pods-cache-restore.outputs.cache-hit != 'true'
        run: npx pod-install

      # Install Detox CLI
      - name: Rebuild Detox Framework
        run: yarn detox clean-framework-cache && yarn detox build-framework-cache

      # Install sentry properties
      - name: Sentry properties
        uses: mobiledevops/secret-to-file-action@v1
        with:
            base64-encoded-secret: ${{ secrets.SENTRY_PROPERTIES }}
            filename: "sentry.properties"
            is-executable: false
            working-directory: "./ios"

      # Start Metro Bundler
      - name: Start Metro Bundler
        run: REACT_APP_UI_LOG=false yarn react-native start &> metro-bundler.log &

      # Build iOS app
      - name: Detox build iOS Debug
        id: build_app
        # if: steps.detox-cache-restore.outputs.cache-hit != 'true'
        timeout-minutes: 60
        run: SKIP_SENTRY=true yarn detox build --configuration ios.sim.debug_xcode_14.2 # GH macos-latest has Xcode 14.2

      # Test with Detox
      - name: Detox test iOS Debug
        id: test_app
        timeout-minutes: 100
        run: yarn detox test --configuration ios.sim.debug_xcode_14.2 --cleanup --headless --record-logs all --take-screenshots failing --retry 1 --tags "not @broken" --publish > cucumber.log

      # Upload test artifacts from Detox
      - name: Upload detox artifacts
        if: always() && steps.test_app.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: detox-fail-artifacts
          path: artifacts

      # Upload cucumber artifacts
      - name: Upload cucumber artifacts
        if: always() && steps.test_app.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: cucumber-fail-artifacts
          path: |
            cucumber.log
            cucumber-report.html

      - name: Upload Metro Bundler logs
        if: always() && steps.build_app.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: metro-bundler-logs
          path: metro-bundler.log
      
      # Create test report
      - name: Create test report
        id: test_report
        uses: dorny/test-reporter@v1
        if: always() && steps.test_app.outcome != 'skipped'
        with:
          name: BDD test report
          path: cucumber.xml
          reporter: java-junit
      
      # Get cucumber published url
      - name: Parse report URL
        id: parse_report_url
        if: always() && steps.test_app.outcome != 'skipped'
        run: |
          echo report_url=$(cat cucumber.log | grep -Eo "https://reports.cucumber.io/reports/[a-zA-Z0-9-]+") >> "$GITHUB_OUTPUT"

      # Post results to slack
      - name: Post to a Slack channel
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: ${{ secrets.SLACK_VEWORLD_CHANNEL_ID }}
          slack-message: |
            🧱 Build Status - iOS Result: *${{ steps.build_app.outcome }}*
            🚀 E2E Testing - iOS Result: *${{ steps.test_app.outcome }}*
            📦 Repository: *${{ github.repository }}*
            🌿 Branch: *${{ github.ref_name }}*
            🔨 Commit: *${{ github.actor }}* [${{ github.sha.short }}](${{ github.event.head_commit.url }})
            🔗 View Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            🗒️ Release Type: ${{ (github.event_name == 'release' && github.event.release.prerelease) && '🔴 THIS IS A PRE-RELEASE!' || 'Not a pre-release' }}
            🏷️ Release Tag: ${{ (github.event_name == 'release') && ('Pre-Release Tag: ' || '') }} ${{ github.event.release.tag_name }}
            📈 Cucumber Report: ${{ steps.parse_report_url.outputs.report_url || 'Not found.' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_VEWORLD_BOT_TOKEN }}
