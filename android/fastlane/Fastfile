default_platform(:android)

platform :android do

  desc "Validate the keystore and credentials"
  lane :validate do
    validate_play_store_json_key(
      json_key: "./pc-api-4895632399891248889-903-1f538768f7fe.json"
    )
  end

  desc "Upload sorucemaps to sentry"
  lane :upload_sourcemaps_sentry do
    sh("echo 'Uploading sourcemaps to sentry - e2e andriod'")
    sentry_check_cli_installed
    #Generate React Native Packager (Metro) bundle and source maps
    sh("npx react-native bundle --dev false --minify false --platform android --entry-file index.js --reset-cache --bundle-output index.android.bundle --sourcemap-output index.android.bundle.map")

    #Compile hermes byte code
    sh("node_modules/react-native/sdks/hermesc/osx-bin/hermesc -O -emit-binary -output-source-map -out=index.android.bundle.hbc index.android.bundle")
    sh("rm -f index.android.bundle")
    sh("mv index.android.bundle.hbc index.android.bundle")
    #Compose Hermes bytecode and (React Native Packager) Metro source maps:
    sh("mv index.android.bundle.map index.android.bundle.packager.map")
    sh("node node_modules/react-native/scripts/compose-source-maps.js index.android.bundle.packager.map index.android.bundle.hbc.map -o index.android.bundle.map")
    sh ("node node_modules/@sentry/react-native/scripts/copy-debugid.js index.android.bundle.packager.map index.android.bundle.map")
    sh("rm -f index.android.bundle.packager.map")

    #upload sourcemaps to sentry
    sh("node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload --debug-id-reference --strip-prefix ../../ index.android.bundle index.android.bundle.map")

  end

  # @param {object} options - The options for the build process.
  # @param {string} options.version_name - The version name of the build.
  # @param {string} options.version_code - The version code of the build.
  desc "Submit a new Beta Build to Play Store"
  lane :build_android do |options|
    store_password = ENV["STORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]
    key_alias = ENV["KEY_ALIAS"]

    github_username = options[:github_username]
    version_name = options[:version_name]
    version_code = options[:version_code]

    Dir.chdir "../.." do
      sh("yarn purge:android && yarn install:android")
    end

    begin
      releaseFilePath = File.join(Dir.pwd, "..", "release.keystore")

      sh("./bump_gradle_app_versions.sh #{version_code} #{version_name}")

      gradle(task: 'clean')
      gradle(
        task: 'assemble',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      gradle(
        task: 'bundle',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      # Upload .aab to the Play Store as internal track
      upload_to_play_store(
        track: 'internal',
        skip_upload_changelogs: true,
        skip_upload_metadata: true
      )

      slack(
        message: version_name.nil? ? "VeWorld build number: #{version_code} was successfully released! [Android]" : "VeWorld version number: #{version_name} was successfully released! [Android]",
        slack_url: ENV["SLACK_WEBHOOK"],
        success: true,
        payload: {
          "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
          "Built by" => github_username,
        },
      )

    rescue => exception
      puts exception

      slack(
        message: version_name.nil? ? "Error releasing VeWorld build number: #{version_code} [Android]" : "Error releasing VeWorld version number: #{version_name} [Android]",
        slack_url: ENV["SLACK_WEBHOOK"],
        success: false,
        payload: {
          "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
          "Built by" => github_username,
        },
      )
    end
  end

  # @param {object} options - The options for the build process.
  # @param {string} options.version_name - The version name of the build.
  # @param {string} options.version_code - The version code of the build.
  desc "Submit a new Beta Build to Play Store"
  lane :build_android_ci do |options|
    store_password = ENV["STORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]
    key_alias = ENV["KEY_ALIAS"]

    github_username = options[:github_username]
    version_name = options[:version_name]
    version_code = options[:version_code]

    setup_ci if ENV['CI']

    sh("chmod +x ./ci_bump_gradle_app_versions.sh")

    Dir.chdir "../.." do
      sh("yarn purge:android && yarn install:android")
    end

    begin
      releaseFilePath = File.join(Dir.pwd, "..", "release.keystore")

      sh("./ci_bump_gradle_app_versions.sh #{version_code} #{version_name}")

      gradle(task: 'clean')
      gradle(
        task: 'bundle',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      upload_to_play_store(
        track: 'internal',
        skip_upload_changelogs: true,
        skip_upload_metadata: true
      )

     
       slack(
         message: "VeWorld version number: #{version_name} build number: #{version_code} was successfully released! [Android]",
         slack_url: ENV["SLACK_WEBHOOK"],
         success: true,
         payload: {
           "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
           "Built by" => github_username,
         },
       )

    rescue => exception
      puts exception

      
       slack(
         message: "Error releasing VeWorld version number: #{version_name} build number: #{version_code} [Android]",
         slack_url: ENV["SLACK_WEBHOOK"],
         success: false,
         payload: {
           "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
           "Built by" => github_username,
         },
       )
    end
  end

  lane :build_test_ci do |options|
    store_password = ENV["STORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]
    key_alias = ENV["KEY_ALIAS"]

    ci_value = true
    sh("./set_ci_vars.sh #{ci_value}")
    sh("export SENTRY_DISABLE_AUTO_UPLOAD=true")

    version_name = options[:version_name]
    version_code = options[:version_code]

    begin
      Dir.chdir "../.." do
        sh("yarn purge:android && yarn install:android")
      end

      releaseFilePath = File.join(Dir.pwd, "..", "release.keystore")

      sh("./ci_bump_gradle_app_versions.sh #{version_code} #{version_name}")

      gradle(task: 'clean')
      gradle(
        task: 'assemble',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      upload_sourcemaps_sentry()

      ci_value = false
      sh("./set_ci_vars.sh #{ci_value}")
      sh("export SENTRY_DISABLE_AUTO_UPLOAD=false")

      # Stash the changes
      sh("git stash save --keep-index --include-untracked")
      # Drop the stash
      sh("git stash drop")

      sh("echo 'Build successful'")
    rescue => exception
      puts exception

      sh("echo 'Build failed'")
    end
  end

end  # Added this 'end' to close the 'platform :android do' block