default_platform(:android)

platform :android do

  desc "Validate the keystore and credentials"
  lane :validate do
    validate_play_store_json_key(
      json_key: "./pc-api-4895632399891248889-903-1f538768f7fe.json"
    )
  end

  desc "Upload sourcemaps to sentry"
  lane :upload_sourcemaps_sentry do
    |values|
    build = values[:build]
    version = values[:version]
    Dir.chdir "../.." do

    sh("echo 'Uploading sourcemaps to sentry - e2e android'")

    # 1. Generate the plain JS bundle & source map in ./sourcemap-bundle/
    sh("mkdir -p sourcemap-bundle")
    sh(%{
      npx react-native bundle \
        --platform android \
        --entry-file index.js \
        --bundle-output sourcemap-bundle/index.android.bundle \
        --sourcemap-output sourcemap-bundle/index.android.bundle.map \
        --dev false
    })

    # 2. Compile Hermes bytecode (note the paths!)
    #    You must pass the input JS bundle from sourcemap-bundle/ and output .hbc there too.
    sh(%{
     node_modules/react-native/sdks/hermesc/linux64-bin/hermesc -O -emit-binary -output-source-map -out=sourcemap-bundle/index.android.bundle.hbc sourcemap-bundle/index.android.bundle
    })

    # 3. Remove the original JS bundle (we only want the .hbc from now on)
    sh("rm -f sourcemap-bundle/index.android.bundle")

    # 4. Rename the .hbc to be our final "index.android.bundle"
    sh("mv sourcemap-bundle/index.android.bundle.hbc sourcemap-bundle/index.android.bundle")

    # 5. Rename the packager map -> "index.android.bundle.packager.map"
    sh("mv sourcemap-bundle/index.android.bundle.map sourcemap-bundle/index.android.bundle.packager.map")

    # 6. Compose the Metro source map with the Hermes source map
    #    hermesc produces a .hbc.map named `index.android.bundle.hbc.map`, so we need that path:
    sh(%{
      node node_modules/react-native/scripts/compose-source-maps.js \
        sourcemap-bundle/index.android.bundle.packager.map \
        sourcemap-bundle/index.android.bundle.hbc.map \
        -o sourcemap-bundle/index.android.bundle.map
    })

    # 7. (Optional) The Sentry "copy-debugid" script. Make sure to pass the correct paths:
    sh(%{
      node node_modules/@sentry/react-native/scripts/copy-debugid.js \
        sourcemap-bundle/index.android.bundle.packager.map \
        sourcemap-bundle/index.android.bundle.map
    })

    # 8. Remove the temporary packager map
    sh("rm -f sourcemap-bundle/index.android.bundle.packager.map")
    
    #debug current location and contents
    sh("echo 'ls -la'")
    sh("pwd")
    sh("ls -la ")

    # 9. Finally, upload to Sentry. Reference the final HBC + final map in `sourcemap-bundle`
    sh <<-SHELL
    export SENTRY_PROPERTIES=./android/sentry.properties
    node_modules/@sentry/cli/bin/sentry-cli sourcemaps upload \
      --org vechain-foundation \
      --project veworld-mobile \
      --release 9.9.9 \
      --dist 99 \
      --debug-id-reference \
      sourcemap-bundle/index.android.bundle \
      sourcemap-bundle/index.android.bundle.map
    SHELL
    sh("echo 'upload via release files'")

    #("node_modules/@sentry/cli/bin/sentry-cli releases files #{ENV["APP_IDENTIFIER"]}@#{build} upload-sourcemaps --strip-prefix ../../ sourcemap-bundle/index.android.bundle sourcemap-bundle/index.android.bundle.map  --debug-id-reference")
    end
  end


  # @param {object} options - The options for the build process.
  # @param {string} options.version_name - The version name of the build.
  # @param {string} options.version_code - The version code of the build.
  desc "Submit a new Beta Build to Play Store"
  lane :build_android do |options|
    store_password = ENV["STORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]
    key_alias = ENV["KEY_ALIAS"]

    github_username = options[:github_username]
    version_name = options[:version_name]
    version_code = options[:version_code]

    Dir.chdir "../.." do
      sh("yarn purge:android && yarn install:android")
    end

    begin
      releaseFilePath = File.join(Dir.pwd, "..", "release.keystore")

      sh("./bump_gradle_app_versions.sh #{version_code} #{version_name}")

      gradle(task: 'clean')
      gradle(
        task: 'assemble',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      gradle(
        task: 'bundle',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      # Upload .aab to the Play Store as internal track
      upload_to_play_store(
        track: 'internal',
        skip_upload_changelogs: true,
        skip_upload_metadata: true
      )

      slack(
        message: version_name.nil? ? "VeWorld build number: #{version_code} was successfully released! [Android]" : "VeWorld version number: #{version_name} was successfully released! [Android]",
        slack_url: ENV["SLACK_WEBHOOK"],
        success: true,
        payload: {
          "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
          "Built by" => github_username,
        },
      )

    rescue => exception
      puts exception

      slack(
        message: version_name.nil? ? "Error releasing VeWorld build number: #{version_code} [Android]" : "Error releasing VeWorld version number: #{version_name} [Android]",
        slack_url: ENV["SLACK_WEBHOOK"],
        success: false,
        payload: {
          "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
          "Built by" => github_username,
        },
      )
    end
  end

  # @param {object} options - The options for the build process.
  # @param {string} options.version_name - The version name of the build.
  # @param {string} options.version_code - The version code of the build.
  desc "Submit a new Beta Build to Play Store"
  lane :build_android_ci do |options|
    store_password = ENV["STORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]
    key_alias = ENV["KEY_ALIAS"]

    github_username = options[:github_username]
    version_name = options[:version_name]
    version_code = options[:version_code]

    setup_ci if ENV['CI']

    sh("chmod +x ./ci_bump_gradle_app_versions.sh")

    Dir.chdir "../.." do
      sh("yarn purge:android && yarn install:android")
    end

    begin
      releaseFilePath = File.join(Dir.pwd, "..", "release.keystore")

      sh("./ci_bump_gradle_app_versions.sh #{version_code} #{version_name}")

      gradle(task: 'clean')
      gradle(
        task: 'bundle',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      upload_to_play_store(
        track: 'internal',
        skip_upload_changelogs: true,
        skip_upload_metadata: true
      )

     
       slack(
         message: "VeWorld version number: #{version_name} build number: #{version_code} was successfully released! [Android]",
         slack_url: ENV["SLACK_WEBHOOK"],
         success: true,
         payload: {
           "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
           "Built by" => github_username,
         },
       )

    rescue => exception
      puts exception

      
       slack(
         message: "Error releasing VeWorld version number: #{version_name} build number: #{version_code} [Android]",
         slack_url: ENV["SLACK_WEBHOOK"],
         success: false,
         payload: {
           "Build Date" => Time.new.strftime("%d/%m/%Y %H:%M"),
           "Built by" => github_username,
         },
       )
    end
  end

  lane :build_test_ci do |options|
    store_password = ENV["STORE_PASSWORD"]
    key_password = ENV["KEY_PASSWORD"]
    key_alias = ENV["KEY_ALIAS"]

    ci_value = true
    sh("./set_ci_vars.sh #{ci_value}")
    sh("export SENTRY_DISABLE_AUTO_UPLOAD=false")

    version_name = options[:version_name]
    version_code = options[:version_code]

    begin
      Dir.chdir "../.." do
        sh("yarn purge:android && yarn install:android")
      end

      releaseFilePath = File.join(Dir.pwd, "..", "release.keystore")

      sh("./ci_bump_gradle_app_versions.sh #{version_code} #{version_name}")
      upload_sourcemaps_sentry(build:version_code)
      gradle(task: 'clean')
      gradle(
        task: 'assemble',
        build_type: 'Release',
        print_command: true,
        print_command_output: true,
        properties: {
          "android.injected.version.code" => version_code,
          "android.injected.version.name" => version_name,
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => store_password,
          "android.injected.signing.key.alias" => key_alias,
          "android.injected.signing.key.password" => key_password,
        }
      )

      

      ci_value = false
      sh("./set_ci_vars.sh #{ci_value}")
      sh("export SENTRY_DISABLE_AUTO_UPLOAD=false")

      # Stash the changes
      sh("git stash save --keep-index --include-untracked")
      # Drop the stash
      sh("git stash drop")

      sh("echo 'Build successful'")
    rescue => exception
      puts exception

      sh("echo 'Build failed'")
    end
  end
end  